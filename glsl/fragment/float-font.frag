const int CHARACTERS[14] = int[14](31599,9362,31183,31207,23524,29671,29679,30994,31727,31719,1488,448,2,3640); float digitIsOn( int digit, vec2 id ) { if ( id.x < .0 || id.y < .0 || id.x > 2. || id.y > 4. ) return .0; return floor( mod( float( CHARACTERS[ int( digit ) ] ) / pow( 2., id.x + id.y * 3. ), 2. ) ); } float digitSign( float v, vec2 id ) { return digitIsOn( 10 - int( ( sign( v ) - 1. ) * .5 ), id ); } int digitCount( float v ) { return int( floor( log( max( v, 1. ) ) / log( 10. ) ) ); } float digitFirst( vec2 uv, float scale, float v, int decimalPlaces ) { vec2 id = floor( uv * scale ); if ( .0 < digitSign( v, id ) ) return 1.; v = abs( v ); int digits = digitCount( v ); float power = pow( 10., float( digits ) ); float offset = floor( .1 * scale ); id.x -= offset; float n; for ( int i = 0 ; i < 33 ; i++, id.x -= offset, v -= power * n, power /= 10. ) { n = floor( v / power ); if ( .0 < digitIsOn( int( n ), id ) ) return 1.; if ( i == digits ) { id.x -= offset; if ( .0 < digitIsOn( int( 12 ), id ) ) return 1.; } if ( i >= digits + decimalPlaces ) return .0; } return .0; } float digitFirst( vec2 uv, float scale, float v ) { return digitFirst( uv, scale, v, 3 ); } vec3 digitIn( vec3 color, vec3 fontColor, vec2 uv, float scale, float v ) { float f = digitFirst( uv, scale, v ); return mix( color, fontColor, f ); } vec3 digitIn( vec3 color, vec2 uv, float scale, float v ) { return digitIn( color, vec3(1.), uv, scale, v ); } 
