        /////////////////////////////////////////////////////////////////
       //                                                            ////
      //  "simple marcher"                                          // //
     //                                                            //  //
    //  scene description goes here                               //   //
   //  scene description goes here                               //    //   
  //  scene description goes here                               //     //
 //                                                            //     //
////////////////////////////////////////////////////////////////     // 
//                                                            //    //
// Creative Commons Attribution-NonCommercial-ShareAlike      //   //                                       //  //
// 3.0 Unported License                                       //  //
//                                                            // //
// by Val "valalalalala" GvM ðŸ’ƒ 2021                          ////
//                                                            ///
////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////
// scene controls

////////////////////////////////////////////////////////////////
// handy constants

#define ZED   .0
#define PI    3.141592653589793 
#define PI2   6.283185307179586

////////////////////////////////////////////////////////////////
// ray marching

#define STEPS 99
#define CLOSE .001
#define FAR   99.
#define EPZ   vec2( ZED, CLOSE )

////////////////////////////////////////////////////////////////

#define FROM_SCREEN(uv)  ( ( 2. * uv - iResolution.xy ) / iResolution.y )
#define MAP_11_01(v)     ( v * .5 + .5 )

#define TRIG(a)    vec2( cos( a  * PI2 ), sin( a * PI2 ) )
#define MAX3(v)    max( v.x, max( v.y, v.z ) )
#define SUM3(v)    ( v.x + v.y + v.z )
#define MODO(v,f)  ( mod( v + .5 * f, f ) - .5 * f )

#define HASH21(v)  fract( 33433.44469 * sin( dot( v + vec2( 17.76, 20.21 ), vec2( 449.457, 359.367 ) ) ) )
#define HASH31(v)  fract( 33433.44469 * sin( dot( v + vec3( 17.76, 20.21, 19.99 ), vec3( 449.457, 359.367, 513.312 ) ) ) )

#define R_QUARTER  mat2( .7071, -.7071, .7071, .7071 )
#define R_HALF     mat2( .0, -1., .0, 1. )

#define RGB(r,g,b) vec3( float(r) / 255.0, float(g) / 255.0, float(b) / 255.0 )

////////////////////////////////////////////////////////////////

mat2 rotate2d( float angle ) {
    vec2 t = TRIG( angle );
    return mat2( t.x, -t.y, t.y, t.x ); // //c-ssc
}

////////////////////////////////////////////////////////////////

float sdBox( vec3 p, float s ) {
    return MAX3( (abs( p ) - vec3( s ) ) );
}

float sdQuadBlob( vec3 p, float s ) {
    return dot( p, p ) / SUM3( abs( p ) ) - s;
}

float sdBall( vec3 p, float r ) {
    return length( p ) - r;
}

////////////////////////////////////////////////////////////////

float inside( float a, float b, float v ) {
    return step( a, v ) * step( v, b );
}

float quirk1 = 33.44;
float quirk2 = 44.33;
// lol
float getHead( vec3 p ) { 
    vec3 og = p;

    p.x /= .71;
    p.z /= .75;
    p.y /= 1. - .24 * step(.0,p.y); // flatten top
    p.x /= 1. - .17 * smoothstep(-.2,-1.,p.y); // squish in bottom side to side
    p.z /= 1. - .1 * smoothstep(.0,1.,p.z);
    p.z -= .18 * abs( p.z ) * smoothstep(-.1,-.5, p.y); // push bottom forward

    float main_r = 1.;

    float main = length( p ) - main_r;
    
    float d = main;
    
    vec2 ms = iMouse.xy / iResolution.xy;
    
    // eyes: 
    p = og;
    p.x = abs( p.x );
    p.y /= .8;
    float eyes = fLineSegment( p, vec3( .19, -.1,.73 ), vec3( .8, -.1 ,.55) ) -.17;
    d = smax( main, -eyes, .1 );
    
    // nose
    
    p = og;
    p.y /= .88;
    float nose = length( p  - vec3( .0, -.37, .74 )  ) - .07;
    p = og;
    float bridge = fLineSegment( p, vec3( .0,.11,.6), vec3( .0,-.3,.75 ) ) -.05;
    nose = smin( nose, bridge, .1 );
    p.x = abs( p.x );
    p.y /= .8;
    float nostrils = length( p - vec3( .06, -.4, .73 ) ) - .06;
    nose = smin( nose, nostrils, .02 );//, .1 );
    
    d = smin( d, nose, .06 );
    
    // lips: need work...
    
    p = og;
    p.x = abs( p.x );
    float top_lip = fLineSegment( p, vec3( .0,-.47,.72), vec3( .15, -.48,.70 ), .03, .01 ); 
    float bot_lip = fLineSegment( p, vec3( .0,-.51,.71), vec3( .11,-.50,.70 ), .04, .02 );
    float lip = smin( top_lip, bot_lip, .009 );
    d = smin( d, lip, .02 );
     
    // chin
    
    p = og;
    p.y /= .7;
    d = smin( d, length( p - vec3( .0, -0.97, .42 ) ) - .27, .1 );
    
    ///
    
    // ears
    
    p = og;
    p.xz * = rotate2 
  //  mat2 rotate2d( float angle ) {

    p.x = abs( p.x );
    p.z /= .79;
    p.x /= .4;
    float outer_ear = length( p - vec3( 1.7, -0.18, .2 ) ) - .18;
    d = min( d, outer_ear );
    
    
    ///
    
    return d  *.5;
}


float getDistance( vec3 p ) {
    return getHead( p );
}

////////////////////////////////////////////////////////////////

float march( vec3 a, vec3 ab ) {
    float d = .0;
    for ( int i = 0 ; i < STEPS ; i++ ) {
        vec3 b = a + d * ab;
        float n = getDistance( b );
        d += n;
        if ( abs( n ) < CLOSE || d > FAR ) break;
    }
    return d;
}

vec3 getDistances( vec3 a, vec3 b, vec3 c ) {
    return vec3( getDistance( a ), getDistance( b ), getDistance( c ) );
}

vec3 getNormal( vec3 p ) {
    return normalize( getDistance( p ) - 
        getDistances( p - EPZ.yxx, p - EPZ.xyx, p - EPZ.xxy )
    );
}

////////////////////////////////////////////////////////////////

// zab,xZup,yXz | zxy:ab,zup,xz
mat3 makeCamera( vec3 a, vec3 b, float roll ) {
    vec3 up = vec3( TRIG( roll ).yx, ZED );
	vec3 z = normalize( b - a );
	vec3 x = normalize( cross( z, up ) );
	vec3 y = normalize( cross( x, z ) );
	return mat3( x, y, z );
}

vec2 getMouse() {
    return true||iMouse.z > .0
        ? FROM_SCREEN( iMouse.xy )
        : vec2( .44 * cos( iTime * .22 ), .33 )
    ;  
}

////////////////////////////////////////////////////////////////

float checked( vec2 uv, float scale ) {
    vec2 st = floor( uv * scale );
    return mod( st.x + st.y, 2. );
}

vec3 texaco( vec2 uv ) {
    return mix( vec3( .7, .7, .9 ), vec3( .9, .9, .7 ), checked( uv, 13. ) );
    // alternatives:
    return vec3( checked( uv, 13. ) );    
    return texture( iChannel0, uv ).xyz;
}

vec3 colorHit( vec3 p ) {
//if (p.z >.0 ) return vec3(1.,.0,.0);
//if (p.y<.0) return vec3(1.);
    // after watching https://www.youtube.com/watch?v=VaYyPTw0V84&ab_channel=TheArtofCode
    vec3 n = getNormal( p );
    
    
    float l = max( .2, pow( MAP_11_01( MAX3(n) ), 2. ) );
    
    n = pow( abs(n), vec3( 4. ) );
    n /= SUM3( n ); // pseudo normalize
    
    vec3 tX = texaco( MAP_11_01( p.yz ) );
    vec3 tY = texaco( MAP_11_01( p.xz ) );
    vec3 tZ = texaco( MAP_11_01( p.xy ) );
    
    
    
    //vec3 tex = ( n.x * tX + n.y * tY + n.z * tZ );
    vec3 tex = RGB( 252, 187, 131 );
#if 0    
    if (p.z>.0)  tex = mix( tex, vec3(.0,.0,1.), .5 );
    //if (p.y>.0)  tex = mix( tex, vec3(1.,.0,.0), .5 );
    //if (p.x>.0)  tex = mix( tex, vec3(.0,1.,.0), .5 );
#endif
    return l * tex;
}

vec3 colorMiss( in vec2 uv ) {
    return .4 * texaco( MAP_11_01( uv * .5 ) );
}

void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
    vec2 uv = FROM_SCREEN( fragCoord );
    float view = 4.;
    float zoom = 3.;

#if 0
    vec3 a = vec3( ZED, ZED, view );
    vec3 ab = vec3( uv * rotate2d( iTime * .1 ), - 1. );
#else
    vec2 m = getMouse();  
    vec2 t = view * TRIG( m.x );
    
    vec3 a = vec3( t.x, .0 * view * TRIG( m.y ).y, t.y );       
    vec3 b = vec3( ZED );
    
    
    //a = vec3(.0,.0,4.);
    
    vec3 ab = normalize( makeCamera( a, b, .0 ) * vec3( uv, zoom ) );
#endif

    float d = march( a, ab );
    float hit = step( d, FAR );

    vec3 p = hit * ( a + ab * d );
    vec3 color = mix( colorMiss( uv ), colorHit( p ), hit );
    
    float foginess = pow( d / FAR, .33 ) * hit;
    vec3 fog = vec3( .22, .11, .4 );
    color = mix( color, fog, foginess );
    
    color = digitIn( color, uv - vec2(.8), 44., quirk1 );
    color = digitIn( color, uv - vec2(.8,.6), 44., quirk2 );
    
    fragColor = vec4( color, 1. );
}
