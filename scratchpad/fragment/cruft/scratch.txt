
// "a few shapes " 
//
// by Val "valalalalala" GvM - 2020
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
//
// see my https://www.shadertoy.com/view/tsyfDw for acknowledgements.

#define RAY_MARCH_STEPS    133
#define RAY_MARCH_TOO_FAR  float( RAY_MARCH_STEPS )
#define RAY_MARCH_CLOSE    0.01

#define PI2  6.283185307179586

mat3 makeCamera( vec3 origin, vec3 target, float roll ) {
	vec3 up = vec3(sin(roll), cos(roll), 0.0);
	vec3 zz = normalize(target - origin);
	vec3 xx = normalize(cross(zz, up));
	vec3 yy = normalize(cross(xx, zz));
	return mat3( xx, yy, zz );
}

float boxSDF( vec3 point, vec3 center, vec3 size ) {
    vec3 diff = abs( point - center ) - size;
    return max( diff.x, max( diff.y, diff.z ) );
}

float projectVector( vec3 a, vec3 b, vec3 p ) {  
    vec3 ab = b - a;
    vec3 ap = p - a;
    
    float numerator   = dot( ap, ab );
    float denomenator = dot( ab, ab );

    return clamp( numerator / denomenator, 0., 1. );
}

float conoSDF( vec3 point, vec3 center, float len, float thickness, float angle ) {
    vec2 o = len * vec2( cos( angle ), sin( angle ) );
    vec3 a = vec3( center.xy + o, center.z );
        
    float h = projectVector( a, center, point );  
    vec3 q = a + ( center -a ) * h;
       
    h = pow( h, 0.7 ); // fatten up a bit...
    h *= 0.8; // little smaller...

    return length( point - q ) - thickness * h;
}

float starSDF( vec3 point, vec3 center, float len, float thickness ) {    
    float b = PI2 / 5.0;
    float angle = b * .25;

    float s1 = conoSDF( point, center, len, thickness, angle + b * 0. );
    float s2 = conoSDF( point, center, len, thickness, angle + b * 1. );
    float s3 = conoSDF( point, center, len, thickness, angle + b * 2. );
    float s4 = conoSDF( point, center, len, thickness, angle + b * 3. );
    float s5 = conoSDF( point, center, len, thickness, angle + b * 4. );
  
    return min( s1, min( s2, min( s3, min( s4, s5 ) ) ) ) ;
}

float ufoSDF( vec3 point, vec3 center, float angle, float len ) {
    vec2 o = vec2( cos( angle ), sin( angle ) );    
    vec3 p = vec3( center.xy + len * o, center.z );
    
    float h = projectVector( p, center, point ) ;
    vec3 q = p + .45 * h * normalize( point -  p );
    
    return ( length( point - q ) - len );
}

float sceneDistance( vec3 point ) {
    float len = 0.77;
    
    float count = 4.;
    vec3 o = vec3( -1.4 * count * 0.5, 0., 0. );
    vec3 x = vec3( 7. / count, 0., 0. );
    
    float ufoA = 1.57 + 0.4 * cos( iTime * 2. );

    float star = starSDF( point, o + 0. * x, len, len * .35 );
    float cono = conoSDF( point, o + 1. * x, len, len * .5, iTime );
    float box  = boxSDF(  point, o + 2. * x, vec3( len * .5 ) );
    float ufo  = ufoSDF(  point, o + 3. * x, ufoA, len * .3 );

    return min( star, min( cono, min( box, ufo ) )  );
}

float rayMarch( in vec3 origin, in vec3 direction ) {
    float total = .0;
    for ( int i = 0 ; i < RAY_MARCH_STEPS ; i++ ) {
        vec3 point = origin + direction * total;
                
        float current = sceneDistance( point );
        total += current;
        if ( total > RAY_MARCH_TOO_FAR || current < RAY_MARCH_CLOSE ) {
            break;
        }
    }
    return total;
}

vec3 sceneNormal(vec3 p) {
	float d = sceneDistance(p);
    vec2 e = vec2(RAY_MARCH_CLOSE, .0);
    return normalize( d - vec3(
        sceneDistance(p-e.xyy),
        sceneDistance(p-e.yxy),
        sceneDistance(p-e.yyx))
    );
}

float poinLight( vec3 point, vec4 light ) {
    vec3 normal = sceneNormal( point );
    
    vec3 towardLight = light.xyz - point;
    float toLight = length( towardLight );
    towardLight = normalize( light.xyz - point );

    float diffuse = clamp( dot( normal, towardLight ), 0., 1. );
    
    vec3 lightStart = point + normal * RAY_MARCH_CLOSE * 2.;
    float d = rayMarch( lightStart, towardLight );
    diffuse *= 1. - 0.5 * smoothstep( d * 0.9, d, toLight );

    float lightStrength = .7 + .3 * light.w / dot( toLight, toLight );  
    return diffuse * lightStrength;
}

vec3 colorPoint( vec3 point ) {
    vec4 light    = vec4( .0, 7., 2., 3. );
    float ambient = 0.07;
    float gamma   = 1.33;
    
    float lighting = poinLight( point, light );
    lighting = ( 1. -  ambient ) * gamma * lighting;

    // make the color
    
    vec3 red = vec3( 1., .0, .0 );
	return vec3( red * ambient + red * lighting );
}

void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
	vec2 uv = ( 2. * gl_FragCoord.xy - iResolution.xy ) / iResolution.y; 
    
    // camera settings
    float t = 1.57 + 0.3 * iTime *0.;
	vec3 eye  = vec3( 4. * cos( t ), cos( t ) + sin( t ), 4. * sin( t ) );
	vec3 look = vec3( .0 );
	float roll = 0.;
    float zoom = 2.;

    // setup and use the camera
    
	mat3 camera = makeCamera( eye, look, roll );
    
    vec3 direction = vec3( uv.xy, zoom );
    direction = normalize( camera * direction );
    
    // do the ray marching (sphere tracing)

    float distance_ = rayMarch( eye, direction );
    float tooFar = step( RAY_MARCH_TOO_FAR, distance_ );   
    vec3 point = eye + direction * distance_;
    
	// the end
    
    vec3 background = vec3( .0, .0, .8 );
    fragColor = vec4( mix( colorPoint( point ), background, tooFar ), 1. );
}
--------------------

// "Marching with Camera" 
//
// by Val "valalalalala" GvM - 2020
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
//
// Big thanks to BigWings's awesome tutorial and video
// - https://www.shadertoy.com/view/XlGBW3
// - https://youtu.be/PGtv-dBi2wE
//
// Camera is from https://github.com/glslify/glsl-look-at

#define RAY_MARCH_STEPS    133
#define RAY_MARCH_TOO_FAR  float( RAY_MARCH_STEPS )
#define RAY_MARCH_CLOSE    0.01

mat3 makeCamera( vec3 origin, vec3 target, float roll ) {
	vec3 up = vec3(sin(roll), cos(roll), 0.0);
	vec3 zz = normalize(target - origin);
	vec3 xx = normalize(cross(zz, up));
	vec3 yy = normalize(cross(xx, zz));
	return mat3( xx, yy, zz );
}

// found another way to make a box...
float box( vec3 point, vec3 center, vec3 size ) {
    vec3 diff = abs( point - center ) - size;
    return max( diff.x, max( diff.y, diff.z ) );
}

#define PI2  6.283185307179586
vec2 toPolar( vec2 center, vec2 current ) {
    vec2 offset = center - current;
    float r = length( offset ) * 1.0;
    float a = atan( offset.y, offset.x );
    return vec2( r, a );
}

float opExtrussion( in vec3 p, in float sdf, in float h )
{
    vec2 w = vec2( sdf, abs(p.z) - h );
  	return min(max(w.x,w.y),0.0) + length(max(w,0.0));
}

float ufo( vec3 point, vec3 center, float l, float angle ) {
    vec2 o = vec2( cos( angle ), sin( angle ) );
    vec3 p = vec3( center.xy + l * o, center.z );
    vec3 toCenter = center - p;
    vec3 toPoint  = point - p;
    
    vec3 toCenterN = normalize( center - p );
    vec3 toPointN  = normalize( point -  p );
    
    float numerator   = dot( toPointN, toCenterN );
    float denomenator = dot( toCenterN, toCenterN );
    
         numerator   = dot( toPoint, toCenter );
     denomenator = dot( toCenter, toCenter );
    // dot(AP,AB) / dot(AB,AB)

    
    float h = numerator / denomenator;
    h = clamp( h, 0., 1. );
    
    vec3 q = p + toPointN * h;
    return length( point - q ) - 0.3;
}

float sego( vec3 point, vec3 center, float len, float thickness, float angle ) {
    vec2 o = len * vec2( cos( angle ), sin( angle ) );
    vec3 p = vec3( center.xy + o, center.z );
    
    p = vec3( center.x, center.y -o.x, center.z + o.y );
    
    vec3 toCenter = center - p;
    vec3 toPoint  = point - p;
    
    vec3 toCenterN = normalize( center - p );
    vec3 toPointN  = normalize( point -  p );
    
    float numerator   = dot( toPoint,  toCenter );
    float denomenator = dot( toCenter, toCenter );
    
    float h = numerator / denomenator;
    h = clamp( h, 0., 1. );
    
    vec3 q = p + toCenter * h;
       
       
    h = pow( h, 0.7 ); // fatten up a bit...
    h *= 0.8; // little smaller...

    return length( point - q ) - thickness * h;
}

float sceneDistance( vec3 point ) {
    vec3 p = normalize( point );
    vec3 c = vec3( 0. );
    
    float len = 1.5;
    float thickness = 0.524;
    
    float b = PI2 / 5.0;
    float angle = 0. * b + b * .5;

    float s1 = sego( point, c, len, thickness, angle + b * 0. );
    float s2 = sego( point, c, len, thickness, angle + b * 1. );
    float s3 = sego( point, c, len, thickness, angle + b * 2. );
    float s4 = sego( point, c, len, thickness, angle + b * 3. );
    float s5 = sego( point, c, len, thickness, angle + b * 4. );
  
    return min( s1, min( s2, min( s3, min( s4, s5 ) ) ) ) ;

   /* 
    
    a = 1. * b + b * .5;
    vec3 p2 = vec3( c.xy + l * vec2( cos( a ), sin( a ) ), c.z );
    a = 2. * b + b * .5;
    vec3 p3 = vec3( c.xy + l * vec2( cos( a ), sin( a ) ), c.z );
    a = 3. * b + b * .5;
    vec3 p4 = vec3( c.xy + l * vec2( cos( a ), sin( a ) ), c.z );
    a = 4. * b + b * .5;
    vec3 p5 = vec3( c.xy + l * vec2( cos( a ), sin( a ) ), c.z );
    */
}
float sceneDistancexx( vec3 point ) {
    vec2 polar = toPolar( vec2( 0.0 ), point.xy );
    float r = polar.x;
    float a = polar.y + 0.;

    float f = abs( cos( a * 5. * 0.5 ) ) * 0.9 + 0.8;
    f = 2. - 0.9 * abs( cos( a * 5. * 0.5 ) );
    float q = smoothstep( f, f + 0.02, r );
    return opExtrussion( point, q, 0.3 );
    
    return q;
    
    return q * abs(0.25*point.z);
    return q - length(point-0.) - 0.3;
    return min(q,q - point.z *0.3);
    
    //return max(q,length(point.z - 0.));
    //return q+point.z;
    return q-33.41;
    
    return max(q , abs(1.-point.z) )-0.3;
}

float sceneDistancex( vec3 point ) {
    //return box( point, vec3( 0. ), vec3( 1.,1.,.5) );
    vec3 p = normalize( point );
    vec3 c = vec3( 0. );
    float l = 0.77;
    float a;
    float b = PI2 / 5.0;
    
    a = 0. * b + b * .5;
    vec3 p1 = vec3( c.xy + l * vec2( cos( a ), sin( a ) ), c.z );
    a = 1. * b + b * .5;
    vec3 p2 = vec3( c.xy + l * vec2( cos( a ), sin( a ) ), c.z );
    a = 2. * b + b * .5;
    vec3 p3 = vec3( c.xy + l * vec2( cos( a ), sin( a ) ), c.z );
    a = 3. * b + b * .5;
    vec3 p4 = vec3( c.xy + l * vec2( cos( a ), sin( a ) ), c.z );
    a = 4. * b + b * .5;
    vec3 p5 = vec3( c.xy + l * vec2( cos( a ), sin( a ) ), c.z );
    
    float d1 = length( p1 - point );
    float d2 = length( p2 - point );
    float d3 = length( p3 - point );
    float d4 = length( p4 - point );
    float d5 = length( p5 - point );
    float d6 = length( c - point );
    
    // intersection: return max(d1,max(d2,max(d3,max(d4,max(d5,d6))))) -1.;
    // union:        return min(d1,min(d2,min(d3,min(d4,min(d5,d6))))) -1.;
    return min(d1,min(d2,min(d3,min(d4,min(d5,d6))))) -1.;

    return length(point - 0.)- 1.;
}

float rayMarch( in vec3 origin, in vec3 direction ) {
    float total = .0;
    for ( int i = 0 ; i < RAY_MARCH_STEPS ; i++ ) {
        vec3 point = origin + direction * total;
                
        float current = sceneDistance( point );
        total += current;
        if ( total > RAY_MARCH_TOO_FAR || current < RAY_MARCH_CLOSE ) {
            break;
        }
    }
    return total;
}

vec3 sceneNormal(vec3 p) {
	float d = sceneDistance(p);
    vec2 e = vec2(RAY_MARCH_CLOSE, .0);
    return normalize( d - vec3(
        sceneDistance(p-e.xyy),
        sceneDistance(p-e.yxy),
        sceneDistance(p-e.yyx))
    );
}

float simpleLight( vec3 point, vec4 light ) {
    vec3 normal = sceneNormal( point );
    
    vec3 towardLight = light.xyz - point;
    float toLight = length( towardLight );
    towardLight = normalize( light.xyz - point );

    float diffuse = clamp( dot( normal, towardLight ), 0., 1. );
    
    vec3 lightStart = point + normal * RAY_MARCH_CLOSE * 2.;
    float d = rayMarch( lightStart, towardLight );  
    if( d < toLight ) {
        diffuse *= .5;
    }
    
    float lightStrength = .7 + .3 * light.w / dot( toLight, toLight );
    
    return diffuse * lightStrength;
}

vec3 colorPoint( vec3 point ) {
    vec4 light    = vec4( .0, 7., 0., 3. );
    float ambient = 0.07;
    float gamma   = 1.33;
    
    float lighting = simpleLight( point, light );
    lighting = ( 1. -  ambient ) * gamma * lighting;

    // make the color
    
    vec3 red = vec3( 1., .0, .0 );
    vec3 ylo = vec3( .9, .9, .5 );
    
    vec3 normal = sceneNormal( point );
    float up = clamp( normal.y, 0., 1. );
    up = smoothstep( 0.99999, 1., up );
    vec3 base = mix( red, ylo, up );
    
    // final result

	return vec3( base * ambient + base * lighting );
}

void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
	vec2 uv = ( 2. * gl_FragCoord.xy - iResolution.xy ) / iResolution.y; 
    
    // camera settings
    float t = 1. * iTime;
	vec3 eye  = vec3( 4. * cos( t ), 0, 4. * sin( t ) );  
	vec3 look = vec3( .0 );
	float roll = 0.;
    float zoom = 2.;

    // setup and use the camera
    
	mat3 camera = makeCamera( eye, look, roll );
    
    vec3 direction = vec3( uv.xy, zoom );
    direction = normalize( camera * direction );
    
    // do the ray marching (sphere tracing)

    float distance_ = rayMarch( eye, direction );
    float tooFar = step( RAY_MARCH_TOO_FAR, distance_ );   
    vec3 point = eye + direction * distance_;
    
	// the end
    
    vec3 background = vec3( .0, .0, .8 );
    fragColor = vec4( mix( colorPoint( point ), background, tooFar ), 1. );
}
